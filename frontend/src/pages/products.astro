---
import Layout from '../layouts/Layout.astro';
import ProductsDisplay from '../components/ProductsDisplay.tsx';
import PersistentSuggestProduct from '../components/PersistentSuggestProduct.tsx'; // Added import
import Database from 'better-sqlite3';
import path from 'path';

// Define TypeScript interfaces for our product data structure
interface ProductVariant {
  variant_id: number;
  sku: string;
  quantity: string; // e.g., "5mg"
  price: number;    // e.g., 49.99
  stock: number;    // e.g., 15
  // If coa_path was added in a previous step, ensure it's here:
  // coa_path?: string | null;
}

interface ProductData {
  id: string; // Using substance_slug for the ID
  name: string;
  description: string;
  purity: string; // e.g., "≥98%"
  variants: ProductVariant[];
  // created_at: string; // Removed as it's no longer used for sorting or display here
}

// Define the path to the SQLite database file
const dbPath = path.resolve(process.cwd(), '../data/database/catalog.db');
let db: Database.Database | null = null; // Explicitly type db

// Initialize products array with the defined type
let products: ProductData[] = [];

// Add new fixed orderBySql for priority sorting
const orderBySql = 'ORDER BY s.priority ASC, s.name ASC, v.mg ASC';

try {
  // Attempt to connect to the database in read-only mode
  db = new Database(dbPath, { readonly: true, fileMustExist: true });
  console.log(`Successfully connected to database at ${dbPath}`);

  // Phase 2: Querying and data transformation
  // Remove requiresMinPriceCTE logic from sqlQuery
  let sqlQuery = `
    SELECT
        s.slug AS substance_slug,
        s.name AS substance_name,
        s.description AS substance_description,
        s.purity_percent,
        -- s.created_at, -- Removed as no longer needed for this page
        v.id AS variant_id,
        v.sku,
        v.mg,
        v.price_cents,
        -- If coa_path was added, ensure it's selected: v.coa_path,
        COALESCE(vi.total_quantity, 0) AS stock
    FROM
        substances s
    JOIN
        variants v ON s.id = v.substance_id
    LEFT JOIN
        variant_inventory vi ON v.id = vi.variant_id
    ${orderBySql};
  `;

  const stmt = db.prepare(sqlQuery);
  const rows = stmt.all() as any[];

  const productsMap = new Map<string, ProductData>();

  for (const row of rows) {
    const slug = row.substance_slug;
    if (!productsMap.has(slug)) {
      productsMap.set(slug, {
        id: slug,
        name: row.substance_name,
        description: row.substance_description,
        purity: row.purity_percent ? `≥${row.purity_percent}%` : 'N/A',
        // created_at: row.created_at, // Removed
        variants: [],
      });
    }

    const product = productsMap.get(slug)!;
    product.variants.push({
      variant_id: row.variant_id,
      sku: row.sku,
      quantity: `${row.mg}mg`,
      price: row.price_cents / 100,
      stock: row.stock,
      // If coa_path was added: coa_path: row.coa_path,
    });
  }

  products = Array.from(productsMap.values());
  // Update console log message
  console.log(`Fetched and transformed ${products.length} products, sorted by priority.`);

} catch (error) {
  console.error('Failed to connect to the database or query data:', error);
  products = [];
} finally {
  if (db) {
    db.close();
    console.log('Database connection closed.');
  }
}
---

<Layout title="Products - Kleis Scientific">
  <section class="py-12">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"> {/* Updated max-width and padding */}
      <h1 class="text-3xl font-bold mb-2 text-center text-navy">Research Compounds</h1> {/* Changed text-[#002855] to text-navy */}
      <p class="text-center text-muted-foreground mb-8">All products are for research use only. Not for therapeutic use or human consumption.</p>

      {products.length > 0 ? (
        <ProductsDisplay client:load initialProducts={products} />
      ) : (
        <p class="text-center text-muted-foreground">
          No products found or an error occurred while loading products.
        </p>
      )}
    </div>
    <PersistentSuggestProduct client:load /> {/* Added component instance */}
  </section>
  {/* <SuggestProductDialog client:load /> */} {/* Ensure this was previously removed */}
</Layout>